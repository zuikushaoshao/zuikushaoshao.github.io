<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>搭建个人博客hexo+github</title>
    <url>/posts/412bc846/</url>
    <content><![CDATA[<p>这篇文章只要是搭建了hexo，基本是搭建博客网上一大堆，所有后面没有想法在写下去，后面主要写工作、学习，日常笔记。</p>
<a id="more"></a>

<h1 id="搭建需要准备"><a href="#搭建需要准备" class="headerlink" title="搭建需要准备"></a>搭建需要准备</h1><blockquote>
<ul>
<li>安装node.js(后续需要npm 下载插件)</li>
<li>安装git，配置好git环境 </li>
<li>github申请账号</li>
<li>安装hexo</li>
<li>hexo 与 github 部署</li>
</ul>
</blockquote>
<h1 id="开始进入正题​-grimacing"><a href="#开始进入正题​-grimacing" class="headerlink" title="开始进入正题​ :grimacing:"></a>开始进入正题​ :grimacing:</h1><h2 id="1-node安装、git安装、github申请账号百度一大堆，略过略过。"><a href="#1-node安装、git安装、github申请账号百度一大堆，略过略过。" class="headerlink" title="1.node安装、git安装、github申请账号百度一大堆，略过略过。"></a>1.node安装、git安装、github申请账号百度一大堆，略过略过。</h2><img src="\gallery\photos\bokeConstructPhotos\bokeConstruct_1.gif" alt=" " style="zoom:200%;" />

<h2 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2.安装hexo"></a>2.安装hexo</h2><p>在合适的磁盘中创建一个文件夹，我是在E盘建了了boke。</p>
<p>进入文件夹，右击会出现Git Bash。</p>
<img src="\gallery\photos\bokeConstructPhotos\bokeConstruct_2.jpg" alt="" style="zoom:50%;" />

<p>输入命令npm install hexo -g，回车，安装hexo。</p>
<img src="\gallery\photos\bokeConstructPhotos\bokeConstruct_3.jpg" style="zoom:75%;" />

<p>输入hexo -v，检查hexo是否安装成功</p>
<img src="\gallery\photos\bokeConstructPhotos\bokeConstruct_4.jpg" alt="" style="zoom:50%;" />

<p>输入hexo init 初始化该文件夹(我是第二次下载hexo，初始化不了，一直报错，就不截屏了:laughing:)<br>最后输入hexo s 启动服务，默认端口4000，如指定端口执行命令 hexo s -p 5000(注:端口号)</p>
<img src="\gallery\photos\bokeConstructPhotos\bokeConstruct_5.png" alt="" style="zoom:100%;" />

<hr>
<img src="\gallery\photos\bokeConstructPhotos\bokeConstruct_6.gif" alt="" style="zoom:100%;" />

<p>​                                                        <font color=red size=72>hexo搭建完成啦</font></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo+github搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix 启动报错 cannot set resource limit [13] Permission denied</title>
    <url>/posts/18ef6777/</url>
    <content><![CDATA[<p>解决zabbix 启动报错 cannot set resource limit &amp; amp; [13] Permission denied </p>
<a id="more"></a>

<h3 id="1、zabbix启动日志报错如下"><a href="#1、zabbix启动日志报错如下" class="headerlink" title="1、zabbix启动日志报错如下"></a>1、zabbix启动日志报错如下</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@p-interface2 zabbix]# cat &#x2F;var&#x2F;log&#x2F;zabbix&#x2F;zabbix_agentd.log  </span><br><span class="line">117190:20210323:160026.629 Starting Zabbix Agent [Zabbix server]. Zabbix 4.4.7 (revision 77fb8c7ee0).</span><br><span class="line">117190:20210323:160026.630 **** Enabled features ****</span><br><span class="line">117190:20210323:160026.630 IPv6 support:          YES</span><br><span class="line">117190:20210323:160026.630 TLS support:           YES</span><br><span class="line">117190:20210323:160026.630 **************************</span><br><span class="line">117190:20210323:160026.630 using configuration file: &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf</span><br><span class="line">117190:20210323:160026.630 cannot set resource limit: [13] Permission denied</span><br><span class="line">117190:20210323:160026.630 cannot disable core dump, exiting...</span><br><span class="line">117190:20210323:160026.630 Zabbix Agent stopped. Zabbix 4.4.7 (revision 77fb8c7ee0).</span><br></pre></td></tr></table></figure>



<h3 id="2、解决方案"><a href="#2、解决方案" class="headerlink" title="2、解决方案"></a>2、解决方案</h3><h4 id="1）修改-etc-selinux-config-文件，关闭-selinux（事先备份文件）"><a href="#1）修改-etc-selinux-config-文件，关闭-selinux（事先备份文件）" class="headerlink" title="1）修改 /etc/selinux/config 文件，关闭 selinux（事先备份文件）"></a>1）修改 /etc/selinux/config 文件，<strong>关闭 selinux</strong>（事先备份文件）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;selinux&#x2F;</span><br><span class="line">cp config config.bak20210323</span><br></pre></td></tr></table></figure>

<h4 id="2-修改config配置"><a href="#2-修改config配置" class="headerlink" title="2) 修改config配置"></a>2) 修改config配置</h4><p>将 SELINUX 修改为 <strong>disabled</strong></p>
<h4 id="3）关闭selinux模式"><a href="#3）关闭selinux模式" class="headerlink" title="3）关闭selinux模式"></a>3）关闭selinux模式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@p-interface3 selinux]# setenforce 0</span><br><span class="line">[root@p-interface3 selinux]# getenforce</span><br><span class="line">Permissive</span><br></pre></td></tr></table></figure>

<h4 id="4-重新启动"><a href="#4-重新启动" class="headerlink" title="4) 重新启动"></a>4) 重新启动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start zabbix-agent</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
  </entry>
  <entry>
    <title>zabbix自动发现挂载磁盘-过滤器</title>
    <url>/posts/f6391c93/</url>
    <content><![CDATA[<p> ZABBIX动态发现磁盘监控，排除掉不需要监控的目录，如/var，/mnt</p>
<a id="more"></a>

<h2 id="1、编辑发现规则"><a href="#1、编辑发现规则" class="headerlink" title="1、编辑发现规则"></a>1、编辑发现规则</h2><p>使用正则表达式来过滤</p>
<h3 id="1、匹配"><a href="#1、匹配" class="headerlink" title="1、匹配"></a>1、匹配</h3><p>就是监控匹配的目录。</p>
<h3 id="2、不匹配"><a href="#2、不匹配" class="headerlink" title="2、不匹配"></a>2、不匹配</h3><p> 反之，排除掉表达式已匹配的目录。<a style="color:red;">如果是多个目录排除，计算方式必须是and，才能排除掉多个目录。</a>如图所示！</p>
<img src="\gallery\photos\zabbix\13、zabbix自动发现过滤器.jpg" alt=" " style="zoom:200%;" />

<h2 id="2、查看图形"><a href="#2、查看图形" class="headerlink" title="2、查看图形"></a>2、查看图形</h2><p>已排除掉不需要监控的/var，/mnt目录</p>
<img src="\gallery\photos\zabbix\14、zabbix自动发现过滤器图形.jpg" alt=" " style="zoom:200%;" />]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
  </entry>
  <entry>
    <title>zabbix-agent自动发现挂载磁盘空间</title>
    <url>/posts/67d022ef/</url>
    <content><![CDATA[<p> ZABBIX动态发现磁盘监控，每台主机磁盘目录 不一，不用死板的去监控固定目录。</p>
<a id="more"></a>

<img src="\gallery\photos\zabbix\8、自动发现规则路径.jpg" alt=" " style="zoom:200%;" />

<h2 id="1、创建发现规则"><a href="#1、创建发现规则" class="headerlink" title="1、创建发现规则"></a>1、创建发现规则</h2><p><strong>表达式 vfs.fs.discovery</strong></p>
<img src="\gallery\photos\zabbix\9、磁盘创建规则.png" alt=" " style="zoom:200%;" />

<h2 id="2、监控、触发器、图形同普通参数创建方式一致"><a href="#2、监控、触发器、图形同普通参数创建方式一致" class="headerlink" title="2、监控、触发器、图形同普通参数创建方式一致"></a>2、监控、触发器、图形同普通参数创建方式一致</h2><p><a style="color:red;">点击下方注意事项框柱的来创建监控、触发器、图形。</a><br><a href="https://www.zabbix.com/documentation/4.0/zh/manual/vm_monitoring/discovery_fields" target="_blank" rel="noopener">官网宏使用</a>。{&#35;FSNAME} 为自动发现监控的目录，也可以放到监控项目名称中，如图</p>
<h3 id="1）创建磁盘监控项"><a href="#1）创建磁盘监控项" class="headerlink" title="1）创建磁盘监控项"></a>1）创建磁盘监控项</h3><p>表达式：vfs.fs.size[{&#35;FSNAME},pused]</p>
<p>注意返回类型和单位</p>
<p>更新间隔时间是监控时间，监控磁盘空间可以放宽。</p>
<img src="\gallery\photos\zabbix\15、zabbix自动发现监控项.jpg" alt=" " style="zoom:200%;" />

<h3 id="2）创建磁盘触发器"><a href="#2）创建磁盘触发器" class="headerlink" title="2）创建磁盘触发器"></a>2）创建磁盘触发器</h3><img src="\gallery\photos\zabbix\16、zabbix自动发现触发器.jpg" alt=" " style="zoom:200%;" />

<h3 id="3）创建磁盘图形"><a href="#3）创建磁盘图形" class="headerlink" title="3）创建磁盘图形"></a>3）创建磁盘图形</h3><img src="\gallery\photos\zabbix\17、zabbix自动发现图形.jpg" alt=" " style="zoom:200%;" />

<h3 id="4）创建磁盘主机模板"><a href="#4）创建磁盘主机模板" class="headerlink" title="4）创建磁盘主机模板"></a>4）创建磁盘主机模板</h3><img src="\gallery\photos\zabbix\18、zabbix自动发现主机模板.jpg" alt=" " style="zoom:200%;" />

<h2 id="3、注意事项"><a href="#3、注意事项" class="headerlink" title="3、注意事项"></a>3、注意事项</h2><p>确保每一项与普通的监控信息一致，<br><img src="\gallery\photos\zabbix\11、磁盘空间结尾.jpg" alt=" " style="zoom:200%;" /></p>
<h2 id="4、查看图形"><a href="#4、查看图形" class="headerlink" title="4、查看图形"></a>4、查看图形</h2><img src="\gallery\photos\zabbix\12、磁盘空间查看图形.jpg" alt=" " style="zoom:200%;" />]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud-zookeeper</title>
    <url>/posts/879bfca6/</url>
    <content><![CDATA[<p>这篇主要写学习zookeeper全过程，以及代码演示(P28-P30)</p>
<p>zookeeper搭建-SpringCloud整合zookeeper</p>
<a id="more"></a>

<p>zookeeper详细为4个节点</p>
<p>临时节点，带序号的临时节点。</p>
<p>持久节点，带序号的持久节点。</p>
<h1 id="1、zookeeper-单机搭建"><a href="#1、zookeeper-单机搭建" class="headerlink" title="1、zookeeper-单机搭建"></a>1、zookeeper-单机搭建</h1><h2 id="1-官网下载"><a href="#1-官网下载" class="headerlink" title="1.官网下载"></a>1.官网下载</h2><p>官网地址:<a href="https://zookeeper.apache.org/releases.html" target="_blank" rel="noopener">https://zookeeper.apache.org/releases.html</a></p>
<p>视频老师用的老版本会出现视频中版本冲突。</p>
<p>我这里使用的是3.5.9，启动测试正常，建议下载最新稳定版本</p>
<img src="\gallery\photos\springCloud\2.0服务注册与发现\zookeeper\1.zookeeper版本.png" alt="" style="zoom:200%;" />

<h2 id="2-Conte7解压安装"><a href="#2-Conte7解压安装" class="headerlink" title="2.Conte7解压安装"></a>2.Conte7解压安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-zookeeper-3.5.9-bin.tar.gz -C 指定解压目录</span><br></pre></td></tr></table></figure>

<h2 id="3-配置zookeeper"><a href="#3-配置zookeeper" class="headerlink" title="3.配置zookeeper"></a>3.配置zookeeper</h2><p>zookeeper目录结构</p>
<img src="\gallery\photos\springCloud\2.0服务注册与发现\zookeeper\2.zookeeper目录结构.png" alt="" style="zoom:200%;" />

<h3 id="1-新建目录data"><a href="#1-新建目录data" class="headerlink" title="1.新建目录data"></a>1.新建目录data</h3><p>新建数据存放目录data，在data目录下创建myid文件并写入1</p>
<h3 id="2-conf配置"><a href="#2-conf配置" class="headerlink" title="2.conf配置"></a>2.conf配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#执行以下命令 配置文件更改名称</span><br><span class="line">cp zoo_sample.cfg zoo.cfg </span><br><span class="line">#编辑 zoo.cfg配置文件</span><br><span class="line">dataDir&#x3D;&#x2F;apache-zookeeper-3.5.9-bin&#x2F;data #数据存放目录</span><br><span class="line">server.1&#x3D;localhost:2182:3888;2181 #指定端口</span><br></pre></td></tr></table></figure>
<h3 id="3-启动命令"><a href="#3-启动命令" class="headerlink" title="3.启动命令"></a>3.启动命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;zkServer.sh start  #启动</span><br><span class="line">.&#x2F;bin&#x2F;zkServer.sh sotp   #停止</span><br><span class="line">.&#x2F;bin&#x2F;zkServer.sh status #查看状态</span><br></pre></td></tr></table></figure>

<h1 id="2-SpringCloud整合客户端zookeeper-8004"><a href="#2-SpringCloud整合客户端zookeeper-8004" class="headerlink" title="2.SpringCloud整合客户端zookeeper(8004)"></a>2.SpringCloud整合客户端zookeeper(8004)</h1><h2 id="1-新建module"><a href="#1-新建module" class="headerlink" title="1.新建module"></a>1.新建module</h2><p>cloud-provider-payment8004</p>
<img src="\gallery\photos\springCloud\2.0服务注册与发现\zookeeper\3.8004项目结构.png" alt="" style="zoom:200%;" />

<h2 id="2-改POM"><a href="#2-改POM" class="headerlink" title="2.改POM"></a>2.改POM</h2><p><a style="color:red">主要是引入依赖 spring-cloud-starter-zookeeper-discovery</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.csh.example&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;cloud-api-commons&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;project.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-web --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-web --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.cloud&#x2F;spring-cloud-starter-zookeeper-discovery --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-zookeeper-discovery&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-devtools --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.projectlombok&#x2F;lombok --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-test --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-改yml"><a href="#3-改yml" class="headerlink" title="3.改yml"></a>3.改yml</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8004</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-provider-payment</span><br><span class="line">  cloud:</span><br><span class="line">    zookeeper:</span><br><span class="line">      connect-string: 172.20.134.122:2181  #zookeepr注册地址 集群使用逗号分隔</span><br></pre></td></tr></table></figure>

<h2 id="4-业务层"><a href="#4-业务层" class="headerlink" title="4.业务层"></a>4.业务层</h2><p>controller</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class PaymentController &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">    String serverPort;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;payment&#x2F;zk&quot;)</span><br><span class="line">    public String paymentZk() &#123;</span><br><span class="line">        return &quot;测试注册zookeeper端口：&quot; + serverPort + &quot; UUID:&quot; + UUID.randomUUID();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h2><h3 id="1、查看zookeeper是否注入成功"><a href="#1、查看zookeeper是否注入成功" class="headerlink" title="1、查看zookeeper是否注入成功"></a>1、查看zookeeper是否注入成功</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#进入服务端</span><br><span class="line">.&#x2F;bin&#x2F;zkCli.sh</span><br></pre></td></tr></table></figure>

<img src="\gallery\photos\springCloud\2.0服务注册与发现\zookeeper\4.查看zookeeper注入情况.png" alt="" style="zoom:200%;" />

<h3 id="2、查看测试接口是否成功"><a href="#2、查看测试接口是否成功" class="headerlink" title="2、查看测试接口是否成功"></a>2、查看测试接口是否成功</h3><p>启动8004</p>
<p>访问地址：<a href="http://localhost:8004/payment/zk" target="_blank" rel="noopener">http://localhost:8004/payment/zk</a></p>
<img src="\gallery\photos\springCloud\2.0服务注册与发现\zookeeper\5.zookeeperWeb测试.png" alt="" style="zoom:200%;" />

<h1 id="3-SpringCloud整合消费端zookeeper-80"><a href="#3-SpringCloud整合消费端zookeeper-80" class="headerlink" title="3.SpringCloud整合消费端zookeeper(80)"></a>3.SpringCloud整合消费端zookeeper(80)</h1><h2 id="1-新建module-1"><a href="#1-新建module-1" class="headerlink" title="1.新建module"></a>1.新建module</h2><p>cloud-consumerzk-order80</p>
<img src="\gallery\photos\springCloud\2.0服务注册与发现\zookeeper\6.zookeeper80端口结构图.png" alt="" style="zoom:200%;" />

<h2 id="2-改pom-8004端口一模一样"><a href="#2-改pom-8004端口一模一样" class="headerlink" title="2.改pom(8004端口一模一样)"></a>2.改pom(8004端口一模一样)</h2><h2 id="3-改yml-8004端口一模一样-端口改为80"><a href="#3-改yml-8004端口一模一样-端口改为80" class="headerlink" title="3.改yml(8004端口一模一样,端口改为80)"></a>3.改yml(8004端口一模一样,端口改为80)</h2><h2 id="4-主启动类"><a href="#4-主启动类" class="headerlink" title="4.主启动类"></a>4.主启动类</h2><h2 id="5-配置类-订单80端口的config一模一样"><a href="#5-配置类-订单80端口的config一模一样" class="headerlink" title="5.配置类(订单80端口的config一模一样)"></a>5.配置类(订单80端口的config一模一样)</h2><h2 id="6-业务层"><a href="#6-业务层" class="headerlink" title="6.业务层"></a>6.业务层</h2><p>controller</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class OrderZKController &#123;</span><br><span class="line"></span><br><span class="line">    public static final String PAYMENT_URL &#x3D; &quot;http:&#x2F;&#x2F;cloud-payment-service&quot;;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">    String serverPort;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;payment&#x2F;zk&quot;)</span><br><span class="line">    public String paymentZk() &#123;</span><br><span class="line">        return &quot;测试注册zookeeper端口：&quot; + serverPort + &quot; UUID:&quot; + UUID.randomUUID();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;consumer&#x2F;payment&#x2F;zk&quot;)</span><br><span class="line">    public String getPaymentZK() &#123;</span><br><span class="line">        return restTemplate.getForObject(PAYMENT_URL + &quot;&#x2F;payment&#x2F;zk&quot;, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-测试"><a href="#7-测试" class="headerlink" title="7.测试"></a>7.测试</h2><h3 id="1-测试zookeeper"><a href="#1-测试zookeeper" class="headerlink" title="1.测试zookeeper"></a>1.测试zookeeper</h3><img src="\gallery\photos\springCloud\2.0服务注册与发现\zookeeper\7.测试1.png" alt="" style="zoom:200%;" />

<h3 id="2-测试页面"><a href="#2-测试页面" class="headerlink" title="2.测试页面"></a>2.测试页面</h3><p>客户端接口：<a href="http://localhost:8004/payment/zk" target="_blank" rel="noopener">http://localhost:8004/payment/zk</a></p>
<p>消费者80接口：<a href="http://localhost/payment/zk" target="_blank" rel="noopener">http://localhost/payment/zk</a></p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud-服务注册于发现</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud-eureka</title>
    <url>/posts/c1ad556f/</url>
    <content><![CDATA[<p>这篇主要写学习eureka全过程，以及代码演示(P15-P24)</p>
<p>原理知识-单机版搭建-集群搭建-服务发现Discovery-Eureka自我保护</p>
<a id="more"></a>

<p>eureka官网停更说明</p>
<p><a href="https://github.com/Netflix/eureka/wiki" target="_blank" rel="noopener">https://github.com/Netflix/eureka/wiki</a></p>
<h1 id="一、Eureka基础知识"><a href="#一、Eureka基础知识" class="headerlink" title="一、Eureka基础知识"></a>一、Eureka基础知识</h1><h2 id="1-什么是服务治理"><a href="#1-什么是服务治理" class="headerlink" title="1.什么是服务治理"></a>1.什么是服务治理</h2><p>Spring Cloud封装了Netflix公司开发的Eureka模块来实现服务治理</p>
<p>在传统的RPC远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。</p>
<h2 id="2-什么是服务注册与发现"><a href="#2-什么是服务注册与发现" class="headerlink" title="2.什么是服务注册与发现"></a>2.什么是服务注册与发现</h2><p>Eureka采用了CS的设计架构，EurekaServer作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用Eureka的客户端连接到Eureka Server并维持心跳连接。这样系统的维护人员就可以通过Eureka Server来监控系统中各个微服务是否正常运行。</p>
<p>在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息比如服务地址通讯地址等以别名方式注册到注册中心上。另一方(满费者、服务提供者)，以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用PC远程调用框架核心设计思想:在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理概念。在任何RPC远程框架中，都会有一个注册中心(存放服务地址相关信息(接口地址)。</p>
<img src="\gallery\photos\springCloud\2.0服务注册与发现\eureka\1.eureka架构图对比dubbo.png" alt="" style="zoom:200%;" />

<h2 id="3-Eureka包含两个组件-Eureka-Server和Eureka-Client"><a href="#3-Eureka包含两个组件-Eureka-Server和Eureka-Client" class="headerlink" title="3.Eureka包含两个组件:Eureka Server和Eureka Client"></a>3.Eureka包含两个组件:Eureka Server和Eureka Client</h2><p>Eureka Server提供服务注册服务各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。</p>
<p>EurekaClient通过注册中心进行访问是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除(默认90秒)。</p>
<h1 id="二、Erueka-单机版Erueka集成"><a href="#二、Erueka-单机版Erueka集成" class="headerlink" title="二、Erueka-单机版Erueka集成"></a>二、Erueka-单机版Erueka集成</h1><h2 id="1-服务端"><a href="#1-服务端" class="headerlink" title="1.服务端"></a>1.服务端</h2><h3 id="1-新建物流服务端"><a href="#1-新建物流服务端" class="headerlink" title="1.新建物流服务端"></a>1.新建物流服务端</h3><p>建modul cloud-eureka-server7001</p>
<img src="\gallery\photos\springCloud\2.0服务注册与发现\eureka\2.eureka7001服务端架构图.png" alt="" style="zoom:200%;" />

<h3 id="2、改pom"><a href="#2、改pom" class="headerlink" title="2、改pom"></a>2、改pom</h3><p>主要引入eureka-server</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;!--依赖Eureka服务端依赖--&gt;</span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.cloud&#x2F;spring-cloud-starter-eureka-server --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.csh.example&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;cloud-api-commons&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;project.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-web --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-web  --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-devtools --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.projectlombok&#x2F;lombok --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-test --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3、改yml"><a href="#3、改yml" class="headerlink" title="3、改yml"></a>3、改yml</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7001</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost  #eureka服务端的实例名字</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false    #指示此实例是否应在eureka *服务器上注册其信息以供他人发现</span><br><span class="line">    fetch-registry: false   #指示此客户端是否应从eureka *服务器获取eureka注册表信息</span><br><span class="line">    service-url:</span><br><span class="line">        defaultZone: http:&#x2F;&#x2F;$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;&#x2F;eureka&#x2F;    #设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span><br></pre></td></tr></table></figure>

<h3 id="4、启动类添加服务端注解-EnableEurekaServer"><a href="#4、启动类添加服务端注解-EnableEurekaServer" class="headerlink" title="4、启动类添加服务端注解@EnableEurekaServer"></a>4、启动类添加服务端注解@EnableEurekaServer</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">//服务端注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerMain7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServerMain7001<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-客户端-8001、8002"><a href="#2-客户端-8001、8002" class="headerlink" title="2.客户端(8001、8002)"></a>2.客户端(8001、8002)</h2><h3 id="1、改POM"><a href="#1、改POM" class="headerlink" title="1、改POM"></a>1、改POM</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--依赖Eureka客户端依赖--&gt;</span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.cloud&#x2F;spring-cloud-starter-eureka-server --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2、-改yml-将自己注册到服务中心"><a href="#2、-改yml-将自己注册到服务中心" class="headerlink" title="2、.改yml 将自己注册到服务中心"></a>2、.改yml 将自己注册到服务中心</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-payment-service # 注册服务端的名称。多个支付模块通过名称替代主机名，形成负载均衡调用</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: true    #表识不向注册中心注册自己</span><br><span class="line">    fetch-registry: true   #表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:7001&#x2F;eureka&#x2F;    #设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span><br></pre></td></tr></table></figure>

<h3 id="3、启动类添加客户端注解-EnableEurekaClient-客户端注解"><a href="#3、启动类添加客户端注解-EnableEurekaClient-客户端注解" class="headerlink" title="3、启动类添加客户端注解@EnableEurekaClient //客户端注解"></a>3、启动类添加客户端注解@EnableEurekaClient //客户端注解</h3><h3 id="4、测试页面"><a href="#4、测试页面" class="headerlink" title="4、测试页面"></a>4、测试页面</h3><p>启动7001、8001<br>访问地址：<a href="http://localhost:7001/" target="_blank" rel="noopener">http://localhost:7001/</a></p>
<img src="\gallery\photos\springCloud\2.0服务注册与发现\eureka\2.eureka单机测试图.png" alt="" style="zoom:200%;" />

<h3 id="5-根据上面客户端搭建把订单80端口也注册到服务端。"><a href="#5-根据上面客户端搭建把订单80端口也注册到服务端。" class="headerlink" title="5.根据上面客户端搭建把订单80端口也注册到服务端。"></a>5.根据上面客户端搭建把订单80端口也注册到服务端。</h3><p>application名称cloud-order-service</p>
<h1 id="三、Erueka-集群版Erueka集成"><a href="#三、Erueka-集群版Erueka集成" class="headerlink" title="三、Erueka-集群版Erueka集成"></a>三、Erueka-集群版Erueka集成</h1><p>集群原理图</p>
<img src="\gallery\photos\springCloud\2.0服务注册与发现\eureka\3.eureka集群原理图.png" alt="" style="zoom:200%;" />

<h2 id="1-服务端集群搭建"><a href="#1-服务端集群搭建" class="headerlink" title="1.服务端集群搭建"></a>1.服务端集群搭建</h2><h3 id="1-新建module7002-参考7001搭建"><a href="#1-新建module7002-参考7001搭建" class="headerlink" title="1.新建module7002(参考7001搭建)"></a>1.新建module7002(参考7001搭建)</h3><img src="\gallery\photos\springCloud\2.0服务注册与发现\eureka\4.eureka集群7002架构图.png" alt="" style="zoom:200%;" />

<h3 id="2-修改映射配置-hostos文件映射"><a href="#2-修改映射配置-hostos文件映射" class="headerlink" title="2.修改映射配置(hostos文件映射)"></a>2.修改映射配置(hostos文件映射)</h3><p>win10文件路径：C:\Windows\System32\drivers\etc<br>注意：我这里出现没有hostos文件<br>win+r 输出cmd 执行下面代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for &#x2F;f %P in (&#39;dir %windir%\WinSxS\hosts &#x2F;b &#x2F;s&#39;) do copy %P %windir%\System32\drivers\etc &amp; echo %P &amp; Notepad %P</span><br></pre></td></tr></table></figure>

<p>文件添加以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1  eureka7001.com</span><br><span class="line">127.0.0.1  eureka7002.com</span><br></pre></td></tr></table></figure>

<h3 id="3-修改服务端yml"><a href="#3-修改服务端yml" class="headerlink" title="3.修改服务端yml"></a>3.修改服务端yml</h3><p>下面是7001yml配置，反之7002把1改为2,2改为1.</p>
<p>相互注册，相互扶持。如果是3台机器，那么defaultZone以‘，’号分隔</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7001</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: eureka7001.com    #eureka服务端的实例名字</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false    #表识不向注册中心注册自己</span><br><span class="line">    fetch-registry: false   #表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;eureka7002.com:7002&#x2F;eureka&#x2F;    #设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址。多台机器逗号分隔。</span><br></pre></td></tr></table></figure>

<h3 id="4-修改8001配置"><a href="#4-修改8001配置" class="headerlink" title="4.修改8001配置"></a>4.修改8001配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service-url:</span><br><span class="line">  #defaultZone: http:&#x2F;&#x2F;localhost:7001&#x2F;eureka&#x2F;    #设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span><br><span class="line">  defaultZone: http:&#x2F;&#x2F;eureka7001.com:7001&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7002.com:7002&#x2F;eureka&#x2F;    #集群版</span><br></pre></td></tr></table></figure>

<h2 id="2-客户端集群搭建"><a href="#2-客户端集群搭建" class="headerlink" title="2.客户端集群搭建"></a>2.客户端集群搭建</h2><h3 id="1-添加8002客户端-cloud-provider-payment8002-，复制客户端8001"><a href="#1-添加8002客户端-cloud-provider-payment8002-，复制客户端8001" class="headerlink" title="1.添加8002客户端(cloud-provider-payment8002)，复制客户端8001"></a>1.添加8002客户端(cloud-provider-payment8002)，复制客户端8001</h3><img src="\gallery\photos\springCloud\2.0服务注册与发现\eureka\5.eureka集群客户端8002.png" alt="" style="zoom:200%;" />

<h3 id="2-pom一模一样，yml改端口，启动类名称改8002"><a href="#2-pom一模一样，yml改端口，启动类名称改8002" class="headerlink" title="2.pom一模一样，yml改端口，启动类名称改8002"></a>2.pom一模一样，yml改端口，启动类名称改8002</h3><h3 id="3-修改8001-8002客户端controller，用来区分负载均衡调用"><a href="#3-修改8001-8002客户端controller，用来区分负载均衡调用" class="headerlink" title="3.修改8001,8002客户端controller，用来区分负载均衡调用"></a>3.修改8001,8002客户端controller，用来区分负载均衡调用</h3><img src="\gallery\photos\springCloud\2.0服务注册与发现\eureka\6.eureka集群客户端controller修改.png" alt="" style="zoom:200%;" />

<h3 id="4-修改80端口消费者的controller"><a href="#4-修改80端口消费者的controller" class="headerlink" title="4.修改80端口消费者的controller"></a>4.修改80端口消费者的controller</h3><p>url改为客户端注册的application的名称</p>
<img src="\gallery\photos\springCloud\2.0服务注册与发现\eureka\7.eureka集群80端口controller修改.png" alt="" style="zoom:200%;" />

<h3 id="5-80端口添加注解-LoadBalanced"><a href="#5-80端口添加注解-LoadBalanced" class="headerlink" title="5.80端口添加注解@LoadBalanced"></a>5.80端口添加注解@LoadBalanced</h3><img src="\gallery\photos\springCloud\2.0服务注册与发现\eureka\8.eureka集群80端口RestTemplate修改.png" alt="" style="zoom:200%;" />

<h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h2><p>启动7001、7002、80、8001、8002<br>访问地址：<a href="http://eureka7001.com:7001/" target="_blank" rel="noopener">http://eureka7001.com:7001/</a></p>
<img src="\gallery\photos\springCloud\2.0服务注册与发现\eureka\9.eureka集群测试web1.png" alt="" style="zoom:200%;" />

<p>访问地址：<a href="http://eureka7002.com:7002/" target="_blank" rel="noopener">http://eureka7002.com:7002/</a></p>
<img src="\gallery\photos\springCloud\2.0服务注册与发现\eureka\9.eureka集群测试web2.png" alt="" style="zoom:200%;" />

<p>测试订单负载均衡调用客户端，多刷新会发现轮询调用客户端，实现负载均衡（gif动图演示）<br>访问地址：<a href="http://localhost/consumer/payment/getId?id=1" target="_blank" rel="noopener">http://localhost/consumer/payment/getId?id=1</a></p>
<img src="\gallery\photos\springCloud\2.0服务注册与发现\eureka\10.轮询调用客户端.gif" alt="" style="zoom:200%;" />

<h1 id="四、服务发现Discovery"><a href="#四、服务发现Discovery" class="headerlink" title="四、服务发现Discovery"></a>四、服务发现Discovery</h1><h2 id="1-服务端8001与8002端口controller"><a href="#1-服务端8001与8002端口controller" class="headerlink" title="1.服务端8001与8002端口controller"></a>1.服务端8001与8002端口controller</h2><p>添加一下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/discovery"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getDiscovery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取注册服务端的客户实例名</span></span><br><span class="line">    List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">    <span class="keyword">for</span> (String service : services) &#123;</span><br><span class="line">        log.info(<span class="string">"serviceName: "</span> + service);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取当前实例名下所有的主机信息</span></span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"cloud-payment-service"</span>);</span><br><span class="line">    <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">        log.info(instance.getServiceId() + <span class="string">"\t"</span> + instance.getHost() + <span class="string">"\t"</span> + instance.getPort() + <span class="string">"\t"</span> + instance.getUri());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-启动类添加注解-EnableDiscoveryClient"><a href="#2-启动类添加注解-EnableDiscoveryClient" class="headerlink" title="2.启动类添加注解@EnableDiscoveryClient"></a>2.启动类添加注解@EnableDiscoveryClient</h2><h2 id="3-测试-1"><a href="#3-测试-1" class="headerlink" title="3.测试"></a>3.测试</h2><img src="\gallery\photos\springCloud\2.0服务注册与发现\eureka\11.Discovery测试1.png" alt="" style="zoom:200%;" />

<img src="\gallery\photos\springCloud\2.0服务注册与发现\eureka\11.Discovery测试2.png" alt="" style="zoom:200%;" />

<h1 id="五、Eureka自我保护"><a href="#五、Eureka自我保护" class="headerlink" title="五、Eureka自我保护"></a>五、Eureka自我保护</h1><p>保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护。一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务。<br>如果在Eureka Server的首页看到以下这段提示，则说明Eureka进入了保护模式：<br>EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT.<br>RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE</p>
<h2 id="关闭自我保护机制"><a href="#关闭自我保护机制" class="headerlink" title="关闭自我保护机制"></a>关闭自我保护机制</h2><h3 id="1-修改客户端yml配置-8001、8002"><a href="#1-修改客户端yml配置-8001、8002" class="headerlink" title="1.修改客户端yml配置(8001、8002)"></a>1.修改客户端yml配置(8001、8002)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eureka:</span><br><span class="line">    server:</span><br><span class="line">        enable-self-preservation: false #关闭自我保护机制</span><br><span class="line">        eviction-interval-timer-in-ms: 2000 #逐出间隔毫秒</span><br></pre></td></tr></table></figure>

<h3 id="2-修改服务端yml配置-7001、7002"><a href="#2-修改服务端yml配置-7001、7002" class="headerlink" title="2.修改服务端yml配置(7001、7002)"></a>2.修改服务端yml配置(7001、7002)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">      lease-renewal-interval-in-seconds: 1 #租约更新间隔（发送心跳，以秒为单位）</span><br><span class="line">      lease-expiration-duration-in-seconds: 2 #租约到期持续时间（发送心跳超市时间，以秒为单位）</span><br></pre></td></tr></table></figure>

<h3 id="3-测试-2"><a href="#3-测试-2" class="headerlink" title="3.测试"></a>3.测试</h3><p>启动一个7001服务端和8001客户端</p>
<p>yml改成单机版</p>
<img src="\gallery\photos\springCloud\2.0服务注册与发现\eureka\12.自我保护机制关闭web.png" alt="" style="zoom:200%;" />

<p>关闭8001客户端、2s心跳后直接删除注册服务</p>
<img src="\gallery\photos\springCloud\2.0服务注册与发现\eureka\关闭自我保护.gif" alt="" style="zoom:200%;" />

]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud-服务注册于发现</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix-agent自定义模板常用监控</title>
    <url>/posts/6fa1df26/</url>
    <content><![CDATA[<p>示例自定义模板创建内存监控、以及触发器。</p>
<a id="more"></a>



<p>常用监控项目表达式：</p>
<table>
<thead>
<tr>
<th>常用监控</th>
<th>表达式</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>内存</td>
<td>vm.memory.size[available]</td>
<td>系统中已用内存量</td>
</tr>
<tr>
<td>内存</td>
<td>vm.memory.size[total]</td>
<td>系统总共内存量</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>swap空间</td>
<td>system.swap.size[,free]</td>
<td></td>
</tr>
<tr>
<td>swap空间</td>
<td>system.swap.size[,pfree]</td>
<td></td>
</tr>
<tr>
<td></td>
<td>system.swap.size[,total]</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>CPU</td>
<td>system.cpu.switches</td>
<td>系统文件切换 （bps）</td>
</tr>
<tr>
<td>CPU</td>
<td>system.cpu.util[,user]</td>
<td>类似于对应系统中top命令查看CPU显示值</td>
</tr>
<tr>
<td>CPU</td>
<td>system.cpu.util[,nice]</td>
<td>类似于对应系统中top命令查看CPU显示值</td>
</tr>
<tr>
<td>CPU</td>
<td>system.cpu.util[,system]</td>
<td>类似于对应系统中top命令查看CPU显示值</td>
</tr>
<tr>
<td>CPU</td>
<td>system.cpu.util[,iowait]</td>
<td>类似于对应系统中top命令查看CPU显示值</td>
</tr>
<tr>
<td>CPU</td>
<td>system.cpu.util[,idle]</td>
<td>类似于对应系统中top命令查看CPU显示值</td>
</tr>
<tr>
<td>CPU</td>
<td>system.cpu.util[,interrupt]</td>
<td>类似于对应系统中top命令查看CPU显示值</td>
</tr>
<tr>
<td>CPU</td>
<td>system.cpu.util[,steal]</td>
<td>类似于对应系统中top命令查看CPU显示值</td>
</tr>
<tr>
<td>CPU</td>
<td>system.cpu.util[,softirq]</td>
<td>类似于对应系统中top命令查看CPU显示值</td>
</tr>
<tr>
<td>CPU</td>
<td>system.cpu.load[percpu,avg1]</td>
<td>系统CPU总负载/在线cpu个数平均1min的利用百分比</td>
</tr>
<tr>
<td>CPU</td>
<td>system.cpu.load[percpu,avg5]</td>
<td>系统CPU总负载/在线cpu个数平均5min的利用百分比</td>
</tr>
<tr>
<td>CPU</td>
<td>system.cpu.load[percpu,avg15]</td>
<td>系统CPU总负载/在线cpu个数平均15min的利用百分比</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>磁盘空间（可用量）</td>
<td>vfs.fs.size[{&#35;FSNAME},free]</td>
<td>可用磁盘空间大小</td>
</tr>
<tr>
<td>磁盘空间（使用百分比）</td>
<td>vfs.fs.size[{&#35;FSNAME},pfree]</td>
<td>可用磁盘空间大小占分区总磁盘空间的百分比</td>
</tr>
<tr>
<td>磁盘空间（总量）</td>
<td>vfs.fs.size[{&#35;FSNAME},total]</td>
<td>分区总磁盘空间大小</td>
</tr>
<tr>
<td>磁盘空间（使用量）</td>
<td>vfs.fs.size[{&#35;FSNAME},used]</td>
<td>已使用磁盘空间大小</td>
</tr>
<tr>
<td>磁盘空间（节点数占用）</td>
<td>vfs.fs.inode[{&#35;FSNAME},pfree]</td>
<td>可用磁盘节点数占总节点数的百分比</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>网络流量（进口）</td>
<td>net.if.in[{&#35;IFNAME}]</td>
<td>网络进接口流量 （bps）</td>
</tr>
<tr>
<td>网络流量（出口）</td>
<td>net.if.out[{&#35;IFNAME}]</td>
<td>网络出接口流量 （bps）</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>系统</td>
<td>proc.num[]</td>
<td>系统中总进程数量，通过top查看</td>
</tr>
<tr>
<td>系统</td>
<td>proc.num[,,run]</td>
<td>系统中处于running的进程，通过top查看</td>
</tr>
<tr>
<td>系统</td>
<td>system.localtime</td>
<td>系统时间</td>
</tr>
<tr>
<td>系统</td>
<td>vfs.file.cksum[/etc/passwd]</td>
<td>系统文件passwd的文件总数</td>
</tr>
<tr>
<td>系统</td>
<td>system.boottime</td>
<td>系统启动的时间戳</td>
</tr>
<tr>
<td>系统</td>
<td>system.hostname</td>
<td>系统名称</td>
</tr>
<tr>
<td>系统</td>
<td>system.cpu.intr</td>
<td>设备中断</td>
</tr>
<tr>
<td>系统</td>
<td>kernel.maxfiles</td>
<td>系统支持打开文件的最大数量</td>
</tr>
<tr>
<td>系统</td>
<td>kernel.maxproc</td>
<td>系统支持打开进程的最大数量</td>
</tr>
<tr>
<td>系统</td>
<td>system.users.num</td>
<td>登陆系统的用户数</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Agent</td>
<td>agent.ping</td>
<td>检查客户端可用性</td>
</tr>
<tr>
<td>Agent</td>
<td>agent.version</td>
<td>检查客户端使用版本</td>
</tr>
<tr>
<td>Agent</td>
<td>system.uname</td>
<td>系统详细信息</td>
</tr>
<tr>
<td>Agent</td>
<td>system.uptime</td>
<td>系统开启持续时间</td>
</tr>
<tr>
<td>Agent</td>
<td>agent.hostname</td>
<td>客户端主机名</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>端口</td>
<td>net.tcp.listen[port]</td>
<td>监控程序端口启用</td>
</tr>
</tbody></table>
<h2 id="1、创建模板"><a href="#1、创建模板" class="headerlink" title="1、创建模板"></a>1、创建模板</h2><p>zabbix首页→配置→模板→创建模板</p>
<img src="\gallery\photos\zabbix\1、创建模板页面路径.jpg" alt=" " style="zoom:200%;" />

<p>创建模板</p>
<img src="\gallery\photos\zabbix\2、创建模板.png" alt=" " style="zoom:200%;" />

<h2 id="2、应用集添加创建的组件，如：内存、CPU、目录、io"><a href="#2、应用集添加创建的组件，如：内存、CPU、目录、io" class="headerlink" title="2、应用集添加创建的组件，如：内存、CPU、目录、io"></a>2、应用集添加创建的组件，如：内存、CPU、目录、io</h2><img src="\gallery\photos\zabbix\3、应用集.png" alt=" " style="zoom:200%;" />

<h2 id="3、例子：监控内存，内存超出75-报警，触发shell脚本调用短信接口"><a href="#3、例子：监控内存，内存超出75-报警，触发shell脚本调用短信接口" class="headerlink" title="3、例子：监控内存，内存超出75%报警，触发shell脚本调用短信接口"></a>3、例子：监控内存，内存超出75%报警，触发shell脚本调用短信接口</h2><h3 id="1）创建监控项"><a href="#1）创建监控项" class="headerlink" title="1）创建监控项"></a>1）创建监控项</h3><p><strong>表达式：vm.memory.size[pavailable]</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">官网参数 https:&#x2F;&#x2F;www.zabbix.com&#x2F;documentation&#x2F;4.0&#x2F;zh&#x2F;manual&#x2F;appendix&#x2F;items&#x2F;vm.memory.size_params</span><br><span class="line">total - 总物理内存.</span><br><span class="line">free - 可用内存.</span><br><span class="line">active - 内存当前使用或最近使用，所以它在RAM中。</span><br><span class="line">inactive - 未使用内存.</span><br><span class="line">wired - 被标记为始终驻留在RAM中的内存，不会移动到磁盘。</span><br><span class="line">pinned - 和&#39;wired&#39;一样。</span><br><span class="line">anon - 与文件无关的内存(不能重新读取)。</span><br><span class="line">exec - 可执行代码，通常来自于一个(程序)文件。</span><br><span class="line">file - 缓存最近访问文件的目录。</span><br><span class="line">buffers - 缓存文件系统元数据。</span><br><span class="line">cached - 缓存为不同事情。</span><br><span class="line">shared - 可以同时被多个进程访问的内存。</span><br><span class="line">used - active + wired 内存。</span><br><span class="line">pused - active + wired 总内存的百分比。</span><br><span class="line">available - inactive + cached + free 内存。</span><br><span class="line">pavailable - inactive + cached + free memory 占&#39;total&#39;的百分比。</span><br></pre></td></tr></table></figure>

<img src="\gallery\photos\zabbix\4、内存监控.png" alt=" " style="zoom:200%;" />

<h3 id="2）触发器同理-内存值-gt-75-触发把告警"><a href="#2）触发器同理-内存值-gt-75-触发把告警" class="headerlink" title="2）触发器同理 (内存值&gt;= 75% 触发把告警)"></a>2）触发器同理 (内存值&gt;= 75% 触发把告警)</h3><p>选择内存监控项</p>
<p><strong>表达式：{data_center:vm.memory.size[pavailable].last(,1)}&gt;=75</strong></p>
<img src="\gallery\photos\zabbix\5、内存触发器.png" alt=" " style="zoom:200%;" />

<p>恢复表达式配置</p>
<p><strong>表达式：{data_center:vm.memory.size[pavailable].last(,1)}&lt;75</strong></p>
<img src="\gallery\photos\zabbix\5.1、内存触发器恢复.jpg" alt=" " style="zoom:200%;" />

<h3 id="3）添加图形"><a href="#3）添加图形" class="headerlink" title="3）添加图形"></a>3）添加图形</h3><img src="\gallery\photos\zabbix\6、内存图形.png" alt=" " style="zoom:200%;" />

<h3 id="4）查看图形"><a href="#4）查看图形" class="headerlink" title="4）查看图形"></a>4）查看图形</h3><img src="\gallery\photos\zabbix\7、内存查看图形.png" alt=" " style="zoom:200%;" />

]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
  </entry>
  <entry>
    <title>zabbix-agent安装</title>
    <url>/posts/971bc486/</url>
    <content><![CDATA[<p>zabbix 客户端agent安装部署过程</p>
<a id="more"></a>

<h3 id="1、下载agent包"><a href="#1、下载agent包" class="headerlink" title="1、下载agent包"></a>1、下载agent包</h3><p>下面是我上传在github的agent包，下载直接用。<br>下载完成上传到需要安装linux主机上。</p>
<p><a href="https://github.com/zuikushaoshao/bokeCorrelation/raw/main/zabbix/zabbix-agent-4.4.7-1.el7.x86_64.rpm" target="_blank" rel="noopener">zabbix-agent-4.4.7-1.el7.x86_64.rpm</a></p>
<h3 id="2、安装rpm包"><a href="#2、安装rpm包" class="headerlink" title="2、安装rpm包"></a>2、安装rpm包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rpm -ivh zabbix-agent-4.4.7-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<h3 id="3、配置zabbxi-agent"><a href="#3、配置zabbxi-agent" class="headerlink" title="3、配置zabbxi-agent"></a>3、配置zabbxi-agent</h3><h4 id="1、编辑配置文件"><a href="#1、编辑配置文件" class="headerlink" title="1、编辑配置文件"></a>1、编辑配置文件</h4><p><a style="color:red;">zabbix_agentd.conf配置文件要授权写的权限</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;zabbix&#x2F;</span><br><span class="line"></span><br><span class="line">vi zabbix_agentd.conf</span><br></pre></td></tr></table></figure>

<h4 id="2、添加相关信息"><a href="#2、添加相关信息" class="headerlink" title="2、添加相关信息"></a>2、添加相关信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Server&#x3D;**.**.**.**  # 安装zabbix主机</span><br><span class="line">zabbix-server的ip  #用于被动模式，数据获取</span><br><span class="line">#ServerActive&#x3D;192.168.8.11    server的ip &#x2F;&#x2F;用于主动模式，数据提交 可以不用配置</span><br><span class="line">Include&#x3D;&#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.d&#x2F;*.conf</span><br><span class="line">UnsafeUserParameters&#x3D;1                   #是否允许自定义的key,1为允许，0为不允许</span><br><span class="line">AllowRoot&#x3D;1 #root运行</span><br></pre></td></tr></table></figure>

<h4 id="3、agent启动、重启、关闭"><a href="#3、agent启动、重启、关闭" class="headerlink" title="3、agent启动、重启、关闭"></a>3、agent启动、重启、关闭</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root~]# systemctl start zabbix-agent   </span><br><span class="line">[root~]# systemctl restart zabbix-agent</span><br><span class="line">[root~]# systemctl enable zabbix-agent</span><br></pre></td></tr></table></figure>

<p>如：报错<a style="color:red;">cannot set resource limit &amp; amp; [13] Permission denied </a></p>
<p><a href="..\18ef6777\" target="_blank">点击跳转解决方案</a></p>
<h3 id="4、查看主机是否有端口10050，有启动成功"><a href="#4、查看主机是否有端口10050，有启动成功" class="headerlink" title="4、查看主机是否有端口10050，有启动成功"></a>4、查看主机是否有端口10050，有启动成功</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ntestat -nltp</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
  </entry>
  <entry>
    <title>shell脚本处理换行符</title>
    <url>/posts/ebf15616/</url>
    <content><![CDATA[<p>记录下耗费半天的处理zabbix数据写入shell脚本处理换行符数据，无限次的测试，调用！！！</p>
<a id="more"></a>

<h3 id="1-zabbix数据如下"><a href="#1-zabbix数据如下" class="headerlink" title="1.zabbix数据如下"></a>1.zabbix数据如下</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Problem has been resolved at 10:32:21 on 2021.01.05</span><br><span class="line"> Problem name: sdb: Disk read&#x2F;write request responses are too high (read &gt; 20 ms for 15m or write &gt; 20 ms for 15m)</span><br><span class="line"> Host: 192.888.88.1</span><br><span class="line"> Severity: Warning</span><br><span class="line"> </span><br><span class="line"> Original problem ID: 88888</span><br></pre></td></tr></table></figure>

<h3 id="2-shell使用sed命令处理。"><a href="#2-shell使用sed命令处理。" class="headerlink" title="2.shell使用sed命令处理。"></a>2.shell使用sed命令处理。</h3><p>参考资料：<a href="https://my.oschina.net/u/1456911/blog/737164" target="_blank" rel="noopener">https://my.oschina.net/u/1456911/blog/737164</a></p>
<img src="\gallery\photos\linux\sed参考资料1.jpg" alt="" style="zoom:100%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#处理count中换行符</span><br><span class="line">count&#x3D;$(echo  $3 | sed &#39;s&#x2F;\r&#x2F;\\r\\n&#x2F;g&#39;)</span><br><span class="line">-- $() 把处理的数据赋予给变量</span><br><span class="line">-- s 替换字符</span><br><span class="line">-- &#x2F;g 内容中所有遇到的</span><br><span class="line">-- \r换行符 替换成字符\\r\\n 转义后的特殊符</span><br></pre></td></tr></table></figure>

<img src="\gallery\photos\bokeConstructPhotos\bokeConstruct_6.gif" alt="" style="zoom:100%;" />]]></content>
      <categories>
        <category>linux命令学习</category>
      </categories>
  </entry>
  <entry>
    <title>curl命令使用POST请求JSON数据</title>
    <url>/posts/c7283069/</url>
    <content><![CDATA[<p>项目中需要liunx调用接口把数据存储到数据库中，在使用curl请求，后台一直接收不到参数，这里记录下自己解决问题思路。</p>
<a id="more"></a>

<h3 id="1-错误代码以及错误curl命令。"><a href="#1-错误代码以及错误curl命令。" class="headerlink" title="1.错误代码以及错误curl命令。"></a>1.错误代码以及错误curl命令。</h3><p>linux中→’’←与→””←差别很大，一直测试一直测试，哭了-.-</p>
<h4 id="1）报错信息，在后台进入底层代码查看，后台请求中也把MediaType设置，但没什么卵用，最后注释掉实践也成功可以拿到数据，重点是headers表头设置！！！"><a href="#1）报错信息，在后台进入底层代码查看，后台请求中也把MediaType设置，但没什么卵用，最后注释掉实践也成功可以拿到数据，重点是headers表头设置！！！" class="headerlink" title="1）报错信息，在后台进入底层代码查看，后台请求中也把MediaType设置，但没什么卵用，最后注释掉实践也成功可以拿到数据，重点是headers表头设置！！！"></a>1）报错信息，在后台进入底层代码查看，后台请求中也把MediaType设置，但没什么卵用，最后注释掉实践也成功可以拿到数据，重点是headers表头设置！！！</h4><img src="\gallery\photos\linux\curl命令使用1.png" alt="" style="zoom:100%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---报错信息---</span><br><span class="line">[root@MiWiFi-R3-srv nginx-1.18.0]# curl -i -X POST -H &quot;&#39;Content-type&#39;:&#39;application&#x2F;json&#39;&quot; -d &#39;&#123;&quot;mobiles&quot;:&quot;17602957806&quot;,&quot;applicationId&quot;:&quot;zabbix&quot;&#125;&#39; http:&#x2F;&#x2F;192.168.31.172:8081&#x2F;saveSmsConsume</span><br><span class="line">HTTP&#x2F;1.1 415 </span><br><span class="line">Content-Type: application&#x2F;json;charset&#x3D;UTF-8</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Date: Sat, 16 Jan 2021 04:52:25 GMT</span><br><span class="line"></span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2021-01-16T04:52:25.446+0000&quot;,&quot;status&quot;:415,&quot;error&quot;:&quot;Unsupported Media Type&quot;,&quot;message&quot;:&quot;Content type &#39;application&#x2F;x-www-form-urlencoded&#39; not supported&quot;,&quot;path&quot;:&quot;&#x2F;saveSmsConsume&quot;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-需指定Content-type"><a href="#2-需指定Content-type" class="headerlink" title="2).需指定Content-type"></a>2).需指定Content-type</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 错误用法 我尝试改成Content-Type 还是会报错...</span><br><span class="line">&quot;&#39;Content-type&#39;:&#39;application&#x2F;json&#39;&quot;  </span><br><span class="line">正确用法，用&quot;&quot;包在linux中是解析变量，重点记下来，然后把json参数也改成双引号，</span><br><span class="line">发现可以进入到后台了,但是获取不到数据。</span><br><span class="line">&quot;Content-type:application&#x2F;json&quot;</span><br></pre></td></tr></table></figure>

<h5 style="color: red;">-- 改过之后的报错信息，要传JSON格式，脑瓜子一下就灵动了,JSON格式哦，哦~~~</h3>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@MiWiFi-R3-srv nginx-1.18.0]# curl -i -X POST -H &quot;Content-type:application&#x2F;json&quot; -d &quot;&#123;mobiles:17602957806,applicationId:eabbix&#125;&quot; http:&#x2F;&#x2F;192.168.31.172:8081&#x2F;saveSmsConsume </span><br><span class="line">HTTP&#x2F;1.1 400  </span><br><span class="line">Content-Type: application&#x2F;json;charset&#x3D;UTF-8 </span><br><span class="line">Transfer-Encoding: chunked Date: Sat, 16 Jan 2021 05:07:58 GMT </span><br><span class="line">Connection: </span><br><span class="line">close &#123;&quot;timestamp&quot;:&quot;2021-01-16T05:07:58.827+0000&quot;,&quot;status&quot;:400,&quot;error&quot;:&quot;BadRequest&quot;,&quot;message&quot;:&quot;JSON parse error: Unexpected character (&#39;m&#39; (code 109)): was expecting double-quote to start field name; nested exception is com.fasterxml.jackson.core.JsonParseException: Unexpected character (&#39;m&#39; (code 109)): was expecting double-quote to start field name\n at [Source: (PushbackInputStream); line: 1, column: 3]&quot;,&quot;path&quot;:&quot;&#x2F;saveSmsConsume&quot;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-完整的正确命令，后台代码。"><a href="#2-完整的正确命令，后台代码。" class="headerlink" title="2.完整的正确命令，后台代码。"></a>2.完整的正确命令，后台代码。</h3><h4 id="1-curl命令"><a href="#1-curl命令" class="headerlink" title="1).curl命令"></a>1).curl命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X POST -H &quot;Content-type:application&#x2F;json&quot; -d &#39;&#123;&quot;mobiles&quot;:&quot;17602957806&quot;,&quot;applicationId&quot;:&quot;zabbix&quot;,&quot;content&quot;:&quot;fuwuqi迪加超人&quot;&#125;&#39; http:&#x2F;&#x2F;192.168.31.172:8081&#x2F;saveSmsConsume</span><br></pre></td></tr></table></figure>

<h4 id="2-后台post请求代码"><a href="#2-后台post请求代码" class="headerlink" title="2).后台post请求代码"></a>2).后台post请求代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@PostMapping(value &#x3D; &quot;&#x2F;saveSmsConsume&quot;, headers &#x3D; &quot;Accept&#x3D;application&#x2F;json;charset&#x3D;UTF-8&quot;) </span><br><span class="line">public Result saveSmsConsume(@RequestBody Outbox outbox) &#123;    </span><br><span class="line">try &#123;        </span><br><span class="line">return this.restTemplate.postForObject(&quot;http:&#x2F;&#x2F;sms-producer&#x2F;sms&#x2F;outbox&#x2F;saveSms&quot;, outbox, Result.class);    </span><br><span class="line">&#125; </span><br><span class="line">catch (Exception e) &#123;        </span><br><span class="line">logger.error(e);    </span><br><span class="line">&#125;    </span><br><span class="line">return ResultGenerator.genFailResult(&quot;存储失败&quot;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="\gallery\photos\bokeConstructPhotos\bokeConstruct_6.gif" alt="" style="zoom:100%;" />]]></content>
      <categories>
        <category>linux命令学习</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud-基础汇总</title>
    <url>/posts/b5ff68f8/</url>
    <content><![CDATA[<p>这篇主要写老师称为0基础所搭建需要的汇总(P5-P14)</p>
<p>微服务架构编码构建，创建项目结构基层搭建，最初的建设以及简单支付和订单模块。</p>
<a id="more"></a>

<h1 id="一、创建父类基层project工程"><a href="#一、创建父类基层project工程" class="headerlink" title="一、创建父类基层project工程"></a>一、创建父类基层project工程</h1><h2 id="1、idea创建项目直接看图，选择maven，选择maven-archetype-site"><a href="#1、idea创建项目直接看图，选择maven，选择maven-archetype-site" class="headerlink" title="1、idea创建项目直接看图，选择maven，选择maven-archetype-site"></a>1、idea创建项目直接看图，选择maven，选择maven-archetype-site</h2><img src="\gallery\photos\springCloud\1.0基础开始\1创建项目.png" alt="" style="zoom:200%;" />

<h2 id="2、项目名称"><a href="#2、项目名称" class="headerlink" title="2、项目名称"></a>2、项目名称</h2><img src="\gallery\photos\springCloud\1.0基础开始\2创建项目.jpg" alt="" style="zoom:200%;" />

<h2 id="3、选择maven路径"><a href="#3、选择maven路径" class="headerlink" title="3、选择maven路径"></a>3、选择maven路径</h2><img src="\gallery\photos\springCloud\1.0基础开始\3创建项目.jgp" alt="" style="zoom:200%;" />

<h2 id="4、idea选择字符集"><a href="#4、idea选择字符集" class="headerlink" title="4、idea选择字符集"></a>4、idea选择字符集</h2><img src="\gallery\photos\springCloud\1.0基础开始\4字符集设置.png" alt="" style="zoom:200%;" />

<h2 id="5、idea左侧显示无关的项目配置文件，可过滤掉不显示"><a href="#5、idea左侧显示无关的项目配置文件，可过滤掉不显示" class="headerlink" title="5、idea左侧显示无关的项目配置文件，可过滤掉不显示"></a>5、idea左侧显示无关的项目配置文件，可过滤掉不显示</h2><img src="\gallery\photos\springCloud\1.0基础开始\5过滤原idea的配置文件.png" alt="" style="zoom:200%;" />

<h2 id="6、idea默认使用注解"><a href="#6、idea默认使用注解" class="headerlink" title="6、idea默认使用注解"></a>6、idea默认使用注解</h2><img src="\gallery\photos\springCloud\1.0基础开始\6默认使用注解.png" alt="" style="zoom:200%;" />

<h2 id="7、idea创建项目直接看图，选择maven，选择maven-archetype-site"><a href="#7、idea创建项目直接看图，选择maven，选择maven-archetype-site" class="headerlink" title="7、idea创建项目直接看图，选择maven，选择maven-archetype-site"></a>7、idea创建项目直接看图，选择maven，选择maven-archetype-site</h2><img src="\gallery\photos\springCloud\1.0基础开始\7java选择版本.png" alt="" style="zoom:200%;" />

<h1 id="二、创建服务端支付模块Payment"><a href="#二、创建服务端支付模块Payment" class="headerlink" title="二、创建服务端支付模块Payment"></a>二、创建服务端支付模块Payment</h1><h2 id="1、父类工程新建modul"><a href="#1、父类工程新建modul" class="headerlink" title="1、父类工程新建modul"></a>1、父类工程新建modul</h2><img src="\gallery\photos\springCloud\1.0基础开始\8创建支付模块1.png" alt="" style="zoom:200%;" />

<h2 id="2、选择maven、SDK选择java1-8"><a href="#2、选择maven、SDK选择java1-8" class="headerlink" title="2、选择maven、SDK选择java1.8"></a>2、选择maven、SDK选择java1.8</h2><img src="\gallery\photos\springCloud\1.0基础开始\9创建支付模块2.png" alt="" style="zoom:200%;" />

<h2 id="3、modul项目名称cloud-provider-payment8001"><a href="#3、modul项目名称cloud-provider-payment8001" class="headerlink" title="3、modul项目名称cloud-provider-payment8001"></a>3、modul项目名称cloud-provider-payment8001</h2><img src="\gallery\photos\springCloud\1.0基础开始\10创建支付模块3.png" alt="" style="zoom:200%;" />

<h2 id="4、父类POM已显示添加model"><a href="#4、父类POM已显示添加model" class="headerlink" title="4、父类POM已显示添加model"></a>4、父类POM已显示添加model</h2><img src="\gallery\photos\springCloud\1.0基础开始\11创建支付模块4.png" alt="" style="zoom:200%;" />

<p>父类pom，版本可以统一管理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.csh.example&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;SpringCloud2020&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;!--子module模块--&gt;</span><br><span class="line">  &lt;modules&gt;</span><br><span class="line">    &lt;module&gt;cloud-provider-payment8001&lt;&#x2F;module&gt;</span><br><span class="line">  &lt;&#x2F;modules&gt;</span><br><span class="line">  &lt;!--第一步添加pom认证 删掉src目录--&gt;</span><br><span class="line">  &lt;packaging&gt;pom&lt;&#x2F;packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 统一管理jar包版本 --&gt;</span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">    &lt;junit.version&gt;4.12&lt;&#x2F;junit.version&gt;</span><br><span class="line">    &lt;log4j.version&gt;1.2.17&lt;&#x2F;log4j.version&gt;</span><br><span class="line">    &lt;lombok.version&gt;1.16.18&lt;&#x2F;lombok.version&gt;</span><br><span class="line">    &lt;mysql.version&gt;5.1.47&lt;&#x2F;mysql.version&gt;</span><br><span class="line">    &lt;druid.version&gt;1.1.16&lt;&#x2F;druid.version&gt;</span><br><span class="line">    &lt;mybatis.spring.boot.version&gt;1.3.0&lt;&#x2F;mybatis.spring.boot.version&gt;</span><br><span class="line">  &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version  --&gt;</span><br><span class="line">  &lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">      &lt;!--spring boot 2.2.2--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.2.2.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">        &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;!--spring cloud Hoxton.SR1--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;Hoxton.SR1&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">        &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.0.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">        &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;mysql.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;druid.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;mybatis.spring.boot.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;junit.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;log4j.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;lombok.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">  &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;!--自动热部署--&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;fork&gt;true&lt;&#x2F;fork&gt;</span><br><span class="line">          &lt;addResources&gt;true&lt;&#x2F;addResources&gt;</span><br><span class="line">        &lt;&#x2F;configuration&gt;</span><br><span class="line">      &lt;&#x2F;plugin&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br><span class="line">  &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>



<h2 id="5、支付模块结构"><a href="#5、支付模块结构" class="headerlink" title="5、支付模块结构"></a>5、支付模块结构</h2><img src="\gallery\photos\springCloud\1.0基础开始\11创建支付模块4.png" alt="" style="zoom:200%;" />

<h3 id="1、改POM"><a href="#1、改POM" class="headerlink" title="1、改POM"></a>1、改POM</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;SpringCloud2020&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.csh.example&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;cloud-provider-payment8001&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-web --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-web --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-web --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;com.alibaba&#x2F;druid --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.10&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;mysql&#x2F;mysql-connector-java --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-jdbc --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-devtools --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.projectlombok&#x2F;lombok --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-test --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--自动热部署子项目添加--&gt;</span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-devtools --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>



<h3 id="2、改application-yml"><a href="#2、改application-yml" class="headerlink" title="2、改application.yml"></a>2、改application.yml</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8001</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-payment-service</span><br><span class="line">  datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    driver-class-name: org.gjt.mm.mysql.Driver</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;dbcloudtest?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;false</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapperLocations: classpath:mapper&#x2F;*.xml</span><br><span class="line">  type-aliases-package: com.csh.example.bean</span><br></pre></td></tr></table></figure>



<h3 id="3、业务层"><a href="#3、业务层" class="headerlink" title="3、业务层"></a>3、业务层</h3><h4 id="1、Result返回状态信息工具类"><a href="#1、Result返回状态信息工具类" class="headerlink" title="1、Result返回状态信息工具类"></a>1、Result返回状态信息工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//全参数的构造函数</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">//无参数的构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 三个构造方法</span></span><br><span class="line"><span class="comment">     * 1.AllArgsConstructor 全参</span></span><br><span class="line"><span class="comment">     * 2.NoArgsConstructor 无参</span></span><br><span class="line"><span class="comment">     * 3.CommonResult 重载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(code, message, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2、bean层"><a href="#2、bean层" class="headerlink" title="2、bean层"></a>2、bean层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//全参数的构造函数</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">//无参数的构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String serial;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、dao层、mapper-xml-放在resources下"><a href="#3、dao层、mapper-xml-放在resources下" class="headerlink" title="3、dao层、mapper.xml(放在resources下)"></a>3、dao层、mapper.xml(放在resources下)</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(Payment payment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Payment <span class="title">getId</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------------    </span><br><span class="line"></span><br><span class="line">mapper.xml层  </span><br><span class="line">    </span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=<span class="string">"com.csh.example.dao.PaymentDao"</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;insert id=<span class="string">"add"</span> parameterType=<span class="string">"Payment"</span> useGeneratedKeys=<span class="string">"true"</span> keyProperty=<span class="string">"id"</span>&gt;</span><br><span class="line">            <span class="function">insert into <span class="title">payment</span><span class="params">(serial)</span> <span class="title">values</span><span class="params">(#&#123;serial&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=<span class="string">"BaseResultMap"</span> type=<span class="string">"com.csh.example.bean.Payment"</span>&gt;</span><br><span class="line">        &lt;id column="id" property="id" jdbcType="BIGINT"&gt;&lt;/id&gt;</span><br><span class="line">        &lt;id column="serial" property="serial" jdbcType="VARCHAR"&gt;&lt;/id&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;select id=<span class="string">"getId"</span>  parameterType=<span class="string">"Long"</span> resultMap=<span class="string">"BaseResultMap"</span>&gt;</span><br><span class="line">            select * from payment where id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>



<h3 id="4、service层"><a href="#4、service层" class="headerlink" title="4、service层"></a>4、service层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * service接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(Payment payment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Payment <span class="title">getId</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*server impl 实现类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentServerImpl</span> <span class="keyword">implements</span> <span class="title">PaymentServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    PaymentDao paymentDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(Payment payment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.add(payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.getId(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、controller层"><a href="#5、controller层" class="headerlink" title="5、controller层"></a>5、controller层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    PaymentServer paymentServer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">add</span><span class="params">(@RequestBody Payment payment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> add = paymentServer.add(payment);</span><br><span class="line">        log.info(<span class="string">"插入结果："</span> + add);</span><br><span class="line">        <span class="keyword">if</span> (add &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">"添加成功"</span>, payment);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">400</span>, <span class="string">"添加失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getId"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getId</span><span class="params">(@RequestParam Long id)</span> </span>&#123;</span><br><span class="line">        Payment payment = paymentServer.getId(id);</span><br><span class="line">        <span class="keyword">if</span> (payment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">"查询成功"</span>, payment);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">400</span>, <span class="string">"查询id:"</span> + id + <span class="string">" 失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、自动热部署、RunDashboard-配置"><a href="#三、自动热部署、RunDashboard-配置" class="headerlink" title="三、自动热部署、RunDashboard 配置"></a>三、自动热部署、RunDashboard 配置</h1><h2 id="1、自动热部署，修改代码、配置自动重启项目，不用依赖手动重启项目操作！"><a href="#1、自动热部署，修改代码、配置自动重启项目，不用依赖手动重启项目操作！" class="headerlink" title="1、自动热部署，修改代码、配置自动重启项目，不用依赖手动重启项目操作！"></a>1、自动热部署，修改代码、配置自动重启项目，不用依赖手动重启项目操作！</h2><p>依赖上面pom里面已添加！</p>
<h3 id="1、子类pom"><a href="#1、子类pom" class="headerlink" title="1、子类pom"></a>1、子类pom</h3><img src="\gallery\photos\springCloud\1.0基础开始\13热部署1.png" alt="" style="zoom:200%;" />

<h3 id="2、父类pom"><a href="#2、父类pom" class="headerlink" title="2、父类pom"></a>2、父类pom</h3><img src="\gallery\photos\springCloud\1.0基础开始\14热部署2.png" alt="" style="zoom:200%;" />

<h3 id="3-settings配置-ctrl-alt-s"><a href="#3-settings配置-ctrl-alt-s" class="headerlink" title="3.settings配置(ctrl+alt+s)"></a>3.settings配置(ctrl+alt+s)</h3><img src="\gallery\photos\springCloud\1.0基础开始\15热部署3.png" alt="" style="zoom:200%;" />

<h3 id="4、idea-注册信息设置"><a href="#4、idea-注册信息设置" class="headerlink" title="4、idea 注册信息设置"></a>4、idea 注册信息设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CTRL + SHIFT + A 打开窗口</span><br><span class="line"></span><br><span class="line">输入：Registry </span><br><span class="line"></span><br><span class="line">打开，找到并勾选compiler.automake.allow.when.app.running</span><br></pre></td></tr></table></figure>

<h3 id="5、重启"><a href="#5、重启" class="headerlink" title="5、重启"></a>5、重启</h3><h2 id="2、RunDashboard-配置"><a href="#2、RunDashboard-配置" class="headerlink" title="2、RunDashboard 配置"></a>2、RunDashboard 配置</h2><p>使我们配置的项目可视化，一眼看到底，方便spring boot项目重新配置、Run、Debug，简化了我们的操作步骤。</p>
<img src="\gallery\photos\springCloud\1.0基础开始\16RunDashboard.jpg" alt="" style="zoom:200%;" />

<h3 id="1、找到-idea下面的workspace-xml文件"><a href="#1、找到-idea下面的workspace-xml文件" class="headerlink" title="1、找到.idea下面的workspace.xml文件"></a>1、找到.idea下面的workspace.xml文件</h3><h3 id="2-在下面的代码中加入一段配置代码-源代码位置"><a href="#2-在下面的代码中加入一段配置代码-源代码位置" class="headerlink" title="2.在下面的代码中加入一段配置代码  源代码位置"></a>2.在下面的代码中加入一段配置代码  源代码位置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">"RunDashboard"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"configurationTypes"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"SpringBootApplicationConfigurationType"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"ruleStates"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RuleState</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"ConfigurationTypeDashboardGroupingRule"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RuleState</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RuleState</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"StatusDashboardGroupingRule"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RuleState</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="四、创建客户端订单模块Order"><a href="#四、创建客户端订单模块Order" class="headerlink" title="四、创建客户端订单模块Order"></a>四、创建客户端订单模块Order</h1><h2 id="1、父类工程新建modul-cloud-consumer-order80"><a href="#1、父类工程新建modul-cloud-consumer-order80" class="headerlink" title="1、父类工程新建modul-cloud-consumer-order80"></a>1、父类工程新建modul-cloud-consumer-order80</h2><p>项目结构</p>
<img src="\gallery\photos\springCloud\1.0基础开始\17创建订单模块1.png" alt="" style="zoom:100%;" />

<h2 id="2、改pom"><a href="#2、改pom" class="headerlink" title="2、改pom"></a>2、改pom</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringCloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.csh.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-改yml"><a href="#3-改yml" class="headerlink" title="3.改yml"></a>3.改yml</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 80 &#x2F;&#x2F; 可有可无 游览器输入可以直接忽略 </span><br><span class="line">          &#x2F;&#x2F;如http:&#x2F;&#x2F;localhost&#x2F;consumer&#x2F;payment&#x2F;getId?id&#x3D;4</span><br></pre></td></tr></table></figure>

<h2 id="4、业务层"><a href="#4、业务层" class="headerlink" title="4、业务层"></a>4、业务层</h2><h3 id="1、controller"><a href="#1、controller" class="headerlink" title="1、controller"></a>1、controller</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class OrderController &#123;</span><br><span class="line"></span><br><span class="line">    public static final String PAYMENT_URL &#x3D; &quot;http:&#x2F;&#x2F;localhost:8001&quot;;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    RestTemplate template;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;consumer&#x2F;payment&#x2F;add&quot;)</span><br><span class="line">    public CommonResult&lt;Payment&gt; add(Payment payment) &#123;</span><br><span class="line">        return template.postForObject(PAYMENT_URL + &quot;&#x2F;add&#x2F;&quot;, payment, CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;consumer&#x2F;payment&#x2F;getId&quot;)</span><br><span class="line">    public CommonResult&lt;Payment&gt; getId(@RequestParam Long id) &#123;</span><br><span class="line">        int a &#x3D; 100;</span><br><span class="line">        return template.getForObject(PAYMENT_URL + &quot;&#x2F;getId?id&#x3D;&quot; + id, CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、bean-同支付模块"><a href="#2、bean-同支付模块" class="headerlink" title="2、bean (同支付模块)"></a>2、bean (同支付模块)</h3><h3 id="3、config-ApplicationContextConfig"><a href="#3、config-ApplicationContextConfig" class="headerlink" title="3、config - ApplicationContextConfig"></a>3、config - ApplicationContextConfig</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ApplicationContextConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public RestTemplate getRestTemplate()&#123;</span><br><span class="line">        return new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="五、工程重构"><a href="#五、工程重构" class="headerlink" title="五、工程重构"></a>五、工程重构</h1><h3 id="1-公共类添加到项目中"><a href="#1-公共类添加到项目中" class="headerlink" title="1.公共类添加到项目中"></a>1.公共类添加到项目中</h3><p>说明：</p>
<p>其他模块如已有公共的实体类，相同代码，创建个公共模块，其他模块调用，方便维护。</p>
<p>pom中的依赖也可以公共使用，后期hutool工具包其他模块也会使用。</p>
<p>项目结构<br><img src="\gallery\photos\springCloud\1.0基础开始\18工程重构架构图.png" alt="" style="zoom:100%;" /></p>
<h3 id="2-公共类所需要的依赖pom"><a href="#2-公共类所需要的依赖pom" class="headerlink" title="2.公共类所需要的依赖pom"></a>2.公共类所需要的依赖pom</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-devtools --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;cn.hutool&#x2F;hutool-all --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;cn.hutool&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hutool-all&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.0&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>



<h3 id="3-删除其他项目的公共类"><a href="#3-删除其他项目的公共类" class="headerlink" title="3.删除其他项目的公共类"></a>3.删除其他项目的公共类</h3><h3 id="4-需要公共类项目pom引入依赖"><a href="#4-需要公共类项目pom引入依赖" class="headerlink" title="4.需要公共类项目pom引入依赖"></a>4.需要公共类项目pom引入依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--引入自己定义的api通用包，可以使用payment 支付 Bean--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.csh.example&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cloud-api-commons&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;project.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud学习总目录</title>
    <url>/posts/89b1e29c/</url>
    <content><![CDATA[<p>记录学习SpringCloud(H版&amp;alibaba)全过程，课程来源哔哩哔哩尚硅谷官方(没打广告嘘~)，从青铜到王者，跟着阳哥撸起来。</p>
<a id="more"></a>

<p>附上哔哩学习网址：<a href="https://www.bilibili.com/video/BV18E411x7eT?p=1" target="_blank" rel="noopener">详情</a><br>附上代码、资料云盘：学习中~</p>
<img src="\gallery\photos\springCloud\2.脑图.png" alt="" style="zoom:200%;" />
<img src="\gallery\photos\springCloud\3.cloud升级详情.jpg" alt="" style="zoom:200%;" />

<h1 id="1、微服务架构图？"><a href="#1、微服务架构图？" class="headerlink" title="1、微服务架构图？"></a>1、微服务架构图？</h1><img src="\gallery\photos\springCloud\微服务架构图1.png" alt="" style="zoom:200%;" />

<h1 id="2、springCloud是什么？"><a href="#2、springCloud是什么？" class="headerlink" title="2、springCloud是什么？"></a>2、springCloud是什么？</h1><p>分布式微服务架构的一站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶</p>
<p>a. 微服务是⼀种架构⻛格，也是⼀种服务；</p>
<p>b. 微服务的颗粒⽐较⼩，⼀个⼤型复杂软件应⽤由多个微服务组成，⽐如Netflix⽬前由500多个的微服务组成；</p>
<p>c. 它采⽤UNIX设计的哲学，每种服务只做⼀件事，是⼀种松耦合的能够被独⽴开发和部署的⽆状态化服务（独⽴扩展、</p>
<p>升级和可替换）。</p>
<p>图中springCloud大概流程图</p>
<img src="\gallery\photos\springCloud\1.流程图.png" alt="" style="zoom:200%;" />

<h1 id="3、微服务模块"><a href="#3、微服务模块" class="headerlink" title="3、微服务模块"></a>3、微服务模块</h1><p>学习微服务，记住5要点，跟着老师敲！</p>
<p>微服务模块</p>
<p>1.建module</p>
<p>2.改POM</p>
<p>3.写YML</p>
<p>4.主启动</p>
<p>5.业务类</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
  </entry>
  <entry>
    <title>MybatisPlus-多数据源</title>
    <url>/posts/89ce880/</url>
    <content><![CDATA[<p>记录MybatisPlus使用多数据源</p>
<a id="more"></a>



<h1 id="1、添加配置"><a href="#1、添加配置" class="headerlink" title="1、添加配置"></a>1、添加配置</h1><h2 id="1、添加-代码生成器-依赖，我这里使用的默认模板"><a href="#1、添加-代码生成器-依赖，我这里使用的默认模板" class="headerlink" title="1、添加 代码生成器 依赖，我这里使用的默认模板"></a>1、添加 代码生成器 依赖，我这里使用的默认模板</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--动态数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、application-yml配置"><a href="#2、application-yml配置" class="headerlink" title="2、application.yml配置"></a>2、application.yml配置</h2><p>添加多数据源，primary指定默认数据源。(注意：如果设置了线程池名称，那么需要指定线程池的名称作为选择。)</p>
<p>官网指定yml配置结构</p>
<img src="\gallery\photos\springBootImages\mybatisPlus\官网yml结构.jpg" alt=" " style="zoom:200%;" />

<p>配置yml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    dynamic:</span><br><span class="line">      primary: master #设置默认的数据源或者数据源组,默认值即为master</span><br><span class="line">      strict: false #设置严格模式,默认false不启动. 启动后在未匹配到指定数据源时候会抛出异常,不启动则使用默认数据源.</span><br><span class="line">      datasource:</span><br><span class="line">        master:</span><br><span class="line">          url: jdbc:mysql://127.0.0.1:3306/smsTest1?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">          username: root</span><br><span class="line">          password: 123456</span><br><span class="line">          driver-class-name: com.mysql.jdbc.Driver # 3.2.0开始支持SPI可省略此配置</span><br><span class="line">        slave:</span><br><span class="line">          url: jdbc:mysql://127.0.0.1:3306/smsTest2?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">          username: root</span><br><span class="line">          password: 123456</span><br><span class="line">          driver-class-name: com.mysql.jdbc.Driver # 3.2.0开始支持SPI可省略此配置</span><br></pre></td></tr></table></figure>


<h1 id="2、使用注解"><a href="#2、使用注解" class="headerlink" title="2、使用注解"></a>2、使用注解</h1><p>使用 <strong>@DS</strong> 切换数据源。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询slave所有用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@DS</span>(<span class="string">"slave"</span>) <span class="comment">//dsName可以为组名也可以为具体某个库的名称</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getSlaveAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="\gallery\photos\bokeConstructPhotos\bokeConstruct_6.gif" alt="" style="zoom:100%;" />]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>mybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot使用MybatisPlus代码生成</title>
    <url>/posts/265a8413/</url>
    <content><![CDATA[<p>使用MybatisPlus代码生成。可以快速生成 Bean、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。结尾使用Spring自带任务定时器。</p>
<a id="more"></a>

<p>前言：记录的是我使用的功能，如需添加自己使用的可以去→<a href="https://baomidou.com/guide/generator.html#%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B"  target="_blank">MybatisPlus官网</a></p>
<h1 id="1、添加配置"><a href="#1、添加配置" class="headerlink" title="1、添加配置"></a>1、添加配置</h1><h2 id="1、添加-代码生成器-依赖，我这里使用的默认模板"><a href="#1、添加-代码生成器-依赖，我这里使用的默认模板" class="headerlink" title="1、添加 代码生成器 依赖，我这里使用的默认模板"></a>1、添加 代码生成器 依赖，我这里使用的默认模板</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--MybatisPlus代码生成--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加 模板引擎 依赖，MyBatis-Plus 支持 Velocity（默认）、Freemarker、Beetl，用户可以选择自己熟悉的模板引擎，如果都不满足您的要求，可以采用自定义模板引擎。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Velocity（默认）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、application-yml配置"><a href="#2、application-yml配置" class="headerlink" title="2、application.yml配置"></a>2、application.yml配置</h2><p>把mybatis 替换成Plus的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#mybatis-plus</span><br><span class="line">mybatis-plus:</span><br><span class="line">  mapper-locations: classpath:mappers/*.xml</span><br><span class="line">  type-aliases-package: com.asiainfo.sms</span><br><span class="line">  global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      id-type: auto #生成键ID</span><br></pre></td></tr></table></figure>


<h1 id="2、copy下官网代码修改"><a href="#2、copy下官网代码修改" class="headerlink" title="2、copy下官网代码修改"></a>2、copy下官网代码修改</h1><p>以下为类源码，可以copy直接使用，能用上的注释上我解释的很清楚了，如果不懂，ctrl+鼠标左键看类里面写的什么，可以做具体配置。</p>
<p>官网上教程也很明白。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringPool;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MybatisPlus 自动生成代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerationPlus</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 读取控制台内容</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">scanner</span><span class="params">(String tip)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        StringBuilder help = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        help.append(<span class="string">"请输入"</span> + tip + <span class="string">"："</span>);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            String ipt = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(ipt)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MybatisPlusException(<span class="string">"请输入正确的"</span> + tip + <span class="string">"！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">        <span class="comment">//输出路径</span></span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">"/src/main/java"</span>);</span><br><span class="line">        <span class="comment">//作者名</span></span><br><span class="line">        gc.setAuthor(<span class="string">"ChenShaoHua"</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// gc.setSwagger2(true); 实体属性 Swagger2 注解</span></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">"jdbc:mysql://127.0.0.1:3306/test?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;serverTimezone=Asia/Shanghai"</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置  生成默认文件名可以看PackageConfig类</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        String moduleName = scanner(<span class="string">"模块名"</span>);</span><br><span class="line">        pc.setModuleName(moduleName);</span><br><span class="line">        pc.setParent(<span class="string">"com"</span>);</span><br><span class="line">        <span class="comment">//实体类文件名</span></span><br><span class="line">        pc.setEntity(<span class="string">"bean"</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line">        <span class="comment">// 自定义配置 可以设置自定义输出文件</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 如果模板引擎是 freemarker</span></span><br><span class="line">        <span class="comment">//String templatePath = "/templates/mapper.xml.ftl";</span></span><br><span class="line">        <span class="comment">// 如果模板引擎是 velocity</span></span><br><span class="line">         String templatePath = <span class="string">"/templates/mapper.xml.vm"</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        cfg.setFileCreate(new IFileCreate() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123;</span></span><br><span class="line"><span class="comment">                // 判断自定义文件夹是否需要创建</span></span><br><span class="line"><span class="comment">                checkDir("调用默认方法创建的目录，自定义目录用");</span></span><br><span class="line"><span class="comment">                if (fileType == FileType.MAPPER) &#123;</span></span><br><span class="line"><span class="comment">                    // 已经生成 mapper 文件判断存在，不想重新生成返回 false</span></span><br><span class="line"><span class="comment">                    return !new File(filePath).exists();</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                // 允许生成模板文件</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输出文件名 ， 如果你 Bean 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！ 我这里处理将Mapper最为后缀</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">"/src/main/resources/mapper/"</span> + tableInfo.getEntityName() + <span class="string">"Mapper"</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置模板</span></span><br><span class="line">        TemplateConfig templateConfig = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line">        <span class="comment">// 配置自定义输出模板</span></span><br><span class="line">        <span class="comment">//指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span></span><br><span class="line">        <span class="comment">// templateConfig.setEntity("templates/entity2.java");</span></span><br><span class="line">        <span class="comment">// templateConfig.setService();</span></span><br><span class="line">        <span class="comment">// templateConfig.setController();</span></span><br><span class="line">        templateConfig.setXml(<span class="keyword">null</span>);</span><br><span class="line">        mpg.setTemplate(templateConfig);</span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 公共父类</span></span><br><span class="line">        strategy.setSuperControllerClass(<span class="string">""</span>);</span><br><span class="line">        <span class="comment">// 写于父类中的公共字段</span></span><br><span class="line">        strategy.setInclude(scanner(<span class="string">"表名，多个英文逗号分割"</span>).split(<span class="string">","</span>));</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">"_"</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3、效果演示"><a href="#3、效果演示" class="headerlink" title="3、效果演示"></a>3、效果演示</h1><h2 id="1-Mysql数据库结构"><a href="#1-Mysql数据库结构" class="headerlink" title="1.Mysql数据库结构"></a>1.Mysql数据库结构</h2><img src="\gallery\photos\springBootImages\mybatisPlus\psMysql结构.jpg" alt=" " style="zoom:200%;" />

<h2 id="2-动图效果演示-动图加载可能慢，稍等下。"><a href="#2-动图效果演示-动图加载可能慢，稍等下。" class="headerlink" title="2.动图效果演示(动图加载可能慢，稍等下。)"></a>2.动图效果演示(动图加载可能慢，稍等下。)</h2><img src="\gallery\photos\springBootImages\mybatisPlus\mp演示.gif" alt=" " style="zoom:200%;" />
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请输入模块名：</span><br><span class="line">example</span><br><span class="line">请输入表名，多个英文逗号分割：</span><br><span class="line">user</span><br></pre></td></tr></table></figure>
<img src="\gallery\photos\springBootImages\mybatisPlus\mp代码生成效果图.jpg" alt=" " style="zoom:200%;" />

<h1 id="4、测试数据"><a href="#4、测试数据" class="headerlink" title="4、测试数据"></a>4、测试数据</h1><h2 id="1、添加thymeleaf配置"><a href="#1、添加thymeleaf配置" class="headerlink" title="1、添加thymeleaf配置"></a>1、添加thymeleaf配置</h2><h3>这里我们简单实用thymeleaf模板，渲染html页面查看测试数据</h3>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thymeleaf:</span><br><span class="line">  cache: false # 开发时关闭缓存,不然没法看到实时页面</span><br><span class="line">#  prefix: classpath:&#x2F;templates&#x2F;   这里thymeleaf默认值已经指定了 无需设置</span><br><span class="line">#  suffix: .html</span><br></pre></td></tr></table></figure>

<img src="\gallery\photos\springBootImages\mybatisPlus\thymeleaf默认类.jpg" alt=" " style="zoom:200%;" />

<h2 id="2、编写代码"><a href="#2、编写代码" class="headerlink" title="2、编写代码"></a>2、编写代码</h2><h3 id="1-这里直接在业务实现层，使用MybatisPlus封装方法"><a href="#1-这里直接在业务实现层，使用MybatisPlus封装方法" class="headerlink" title="1.这里直接在业务实现层，使用MybatisPlus封装方法"></a>1.这里直接在业务实现层，使用MybatisPlus封装方法</h3><h6 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h6><img src="\gallery\photos\springBootImages\mybatisPlus\mp业务层.jpg" alt=" " style="zoom:200%;" />

<h6 id="业务实现层"><a href="#业务实现层" class="headerlink" title="业务实现层"></a>业务实现层</h6><img src="\gallery\photos\springBootImages\mybatisPlus\mp业务实现层.jpg" alt=" " style="zoom:200%;" />

<h3 id="2-控制层"><a href="#2-控制层" class="headerlink" title="2.控制层"></a>2.控制层</h3><img src="\gallery\photos\springBootImages\mybatisPlus\mp控制层.jpg" alt=" " style="zoom:200%;" />

<h3 id="3-完成测试数据"><a href="#3-完成测试数据" class="headerlink" title="3.完成测试数据"></a>3.完成测试数据</h3><img src="\gallery\photos\springBootImages\mybatisPlus\mp页面.jpg" alt=" " style="zoom:200%;" />

<h1 id="5、完成整合MP"><a href="#5、完成整合MP" class="headerlink" title="5、完成整合MP"></a>5、完成整合MP</h1><h2 id="1、记录整合MP，以及使用代码生成"><a href="#1、记录整合MP，以及使用代码生成" class="headerlink" title="1、记录整合MP，以及使用代码生成"></a>1、记录整合MP，以及使用代码生成</h2><h2 id="2、顺便记录下使用Spring定时器"><a href="#2、顺便记录下使用Spring定时器" class="headerlink" title="2、顺便记录下使用Spring定时器"></a>2、顺便记录下使用Spring定时器</h2><p>在SpringBoot启动类上添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//开启SpringBoot定时任务</span></span><br></pre></td></tr></table></figure>

<p>在需要定时执行方法上添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scheduled</span>(cron = <span class="string">"0 */1 * * * ?"</span>)</span><br></pre></td></tr></table></figure>
<p>cron格式网上一大堆，每分钟执行一次</p>
<p><a href="https://crontab.guru/#05_*/1_*_*_*"  target="_blank">验证cron网站</a></p>
<img src="\gallery\photos\bokeConstructPhotos\bokeConstruct_6.gif" alt="" style="zoom:100%;" />]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>mybatisPlus</tag>
      </tags>
  </entry>
</search>
